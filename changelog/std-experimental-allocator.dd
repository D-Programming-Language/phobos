Add `OpaquePointer` to the `std.experimental.allocator` package

`OpaquePointer` should be used to provide a memory buffer to allocators that
manage a buffer, such as $(REF Region,std,experimental,allocator,building_blocks,region).
Using `OpaquePointer` will ensure that the garbage collector will mark the
memory for scanning.

The following allocators have a `safe` ctor when provided with an
$(REF OpaquePointer,std,experimental,allocator) memory buffer:

$(UL
    $(LI $(REF BitmappedBlock,std,experimental,allocator,building_blocks,bitmapped_block))
    $(LI $(REF FreeList,std,experimental,allocator,building_blocks,free_list))
    $(LI $(REF KRRegion,std,experimental,allocator,building_blocks,kernighan_ritchie))
    $(LI $(REF Region,std,experimental,allocator,building_blocks,region))
)

Note: the responsibility of allocating the buffer properly falls on the caller.

-------
import std.experimental.allocator : OpaquePointer;
import std.experimental.allocator.building_blocks.region : Region;

void main()
{
    // Create a 64 KB region
    auto reg = Region!()(new OpaquePointer[1024 * 64 / OpaquePointer.sizeof]);
    const b = reg.allocate(101);
    assert(b.length == 101);
    assert(reg.deallocateAll());
    auto c = reg.allocateAll();
    assert(c.length == 1024 * 64);
}
-------
