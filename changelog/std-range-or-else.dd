Added `std.range.orElse` to use default values for empty ranges

$(REF orElse, std, range, primitives) allows to provide a default value when dealing
with possibly empty ranges:

------
import std.range : drop, orElse;

auto arr = [0, 1, 2];

// given a non-empty range, it is a pure proxy
auto d = arr.orElse(42);
writeln(d); // OrElse([0, 1, 2])
assert(d.front == 0);
assert(d.length == 3);

// given an empty range, it uses the orElse
auto e = arr.drop(3).orElse(42);
writeln(e); // OrElse(42)
assert(e.front == 42);

// the orElse range has a length of 1
assert(e.length == 1);
e.popFront;
assert(e.empty);
------
