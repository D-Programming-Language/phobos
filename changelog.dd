Ddoc

$(COMMENT Pending changelog for 2.072. This will get copied to dlang.org and
    cleared when master gets merged into stable prior to 2.072.
)

$(BUGSTITLE Library Changes,
    $(LI $(RELATIVE_LINK2 process, Process creation in
        $(STDMODREF process, std.process) was sped up on Posix.))
    $(LI $(XREF range, padLeft) and $(XREF range, padRight) were added.)
    $(LI $(XREF uni, isNumber) and $(XREF uni, isPunctuation) now use a separate,
    optimized path for ASCII inputs.)
    $(LI $(XREF uni, isAlphaNum), which is analogous to $(XREF ascii, isAlphaNum)
        was added.)
    $(LI $(XREF regex, regex) now supports inline comments with (?#...) syntax.
    $(LI std.regex had numerous optimization applied, compile-time $(XREF regex, ctRegex)
    should now be generally faster then the run-time version.)
    $(LI $(XREF regex, regex) now supports matching multiple patterns in one go.)
    $(LI $(XREF algorithm, mutation, swapAt) was exposed)
    $(LI $(XREF range, primitives, moveAt) accepts only `size_t` for its index
    arguments.)
    $(LI $(XREF range, iota)'s `.length` property is fixed to `size_t` instead
    of the type being iterated)
    $(LI $(XREF algorithm, sorting, isStrictlyMonotonic) which doesn't allow
    equal values was added.)
    $(LI $(XREF meta, Apply) was added to instantiate templates which would
    otherwise be disallowed by D's grammar.)
)

$(BUGSTITLE Library Changes,

$(LI $(RELATIVE_LINK2 process, Process creation in
    $(STDMODREF process, std.process) was sped up on Posix.)
Previously, Posix systems would attempt to close every file descriptor from 3
    to the maximum file descriptor number if `inheritFDs` was not specified
    with `spawnProcess`, `pipeProcess`, etc.
    $(STDMODREF process, std.process) now uses `poll()` to determine which
    descriptors need closing.
)

$(LI $(P $(XREF range, padLeft) and $(XREF range, padRight) are functions for
        padding ranges to a specified length using the given element.
    )

-------
import std.range;
import std.algorithm.comparison;

assert([1, 2, 3, 4, 5].padLeft(0, 7).equal([0, 0, 1, 2, 3, 4, 5]));

assert("Hello World!".padRight('!', 15).equal("Hello World!!!!"));
-------
)

$(LI $(XREF regex, regex) now supports matching multiple patterns in one go.
-------
import std.regex;
// multi-pattern regex
auto multi = regex([`\d+,\d+`,`(a-z]+):(\d+)`]);
auto m = "abc:43 12,34".matchAll(multi);
assert(m.front.whichPattern == 2);
assert(m.front[1] == "abc");
assert(m.front[2] == "43");
m.popFront();
assert(m.front.whichPattern == 1);
assert(m.front[1] == "12");
-------
)

$(LI $(P $(XREF algorithm, mutation, swapAt) allows to swap elements
		of a RandomAccessRange by their indices.
    )

$(LI $(P $(XREF range, iota)'s `.length` property is now always returned as
		`size_t`.  This means if you are on a 32-bit CPU and you are using
		iota to iterate 64-bit types, the length will be truncated to `size_t`.
		In non-release mode, you will get an exception if the length exceeds
		`size_t.max` in your call to `iota`.
	)

Macros:
    TITLE=Change Log

    BUGSTITLE = <div class="bugsfixed">$(H4 $1) $(OL $2 )</div>

    RELATIVE_LINK2=<a href="#$1">$+</a>
    LNAME2=<a class="anchor" title="Permalink to this section" id="$1" href="#$1">$+</a>

    STDMODREF = <a href="phobos/std_$1.html">$2</a>
    XREF = <a href="phobos/std_$1.html#$2">$2</a>
    CXREF = <a href="phobos/core_$1.html#$2">$2</a>
    OXREF = <a href="phobos/object.html#$2">$2</a>
    NXREF = <a href="phobos/std_$1.html#.$2">$2</a>
    NCXREF = <a href="phobos/core_$1.html#.$2">$2</a>
    NOXREF = <a href="phobos/object.html#.$2">$2</a>

    BOOKTABLE = <table><caption>$1</caption>$+</table>
